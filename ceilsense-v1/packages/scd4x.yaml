substitutions:
  scd4x_i2c_id: "bus_a"
  scd4x_address: 0x62
  scd4x_measurement_mode: "low_power_periodic"
  scd4x_update_interval: "30s"
  scd4x_asc: false
  scd4x_temperature_offset: 10.0

sensor:
  - platform: scd4x
    id: scd41_sensor
    i2c_id: ${scd4x_i2c_id}
    address: ${scd4x_address}
    co2:
      name: "SCD41 CO2"
      id: scd41_co2
    temperature:
      name: "SCD41 Temperature"
      id: scd41_temperature
      filters:
        - lambda: |-
            return x + id(scd4x_temp_offset).state;
    humidity:
      name: "SCD41 Humidity"
      id: scd41_humidity
      filters:
        - lambda: |-
            return x + id(scd4x_humidity_offset).state;
    measurement_mode: ${scd4x_measurement_mode}
    update_interval: ${scd4x_update_interval}
    automatic_self_calibration: ${scd4x_asc}
    temperature_offset: ${scd4x_temperature_offset}  # Default offset for ESP temperature compensation
    ambient_pressure_compensation_source: bmp_pressure

number:
  - platform: template
    name: "SCD4x Extra Temperature Offset (°C)"
    id: scd4x_temp_offset
    icon: mdi:thermometer-plus
    entity_category: config
    optimistic: true
    restore_value: true
    initial_value: 5  # Extra offset above fixed 10°C
    min_value: -20.0
    max_value: 20.0
    step: 0.1
    unit_of_measurement: "°C"
    mode: box

  - platform: template
    name: "SCD4x Humidity Offset (%)"
    id: scd4x_humidity_offset
    icon: mdi:water-percent
    entity_category: config
    optimistic: true
    restore_value: true
    initial_value: 0.0
    min_value: -20.0
    max_value: 20.0
    step: 0.1
    unit_of_measurement: "%"
    mode: box

esphome:
  # Self-test phase 3: SCD4x values
  on_boot:
    - priority: 560
      then:
        - lambda: 'id(scd4x_required) = true;'
        - lambda: |-
            id(startup_phase) = 3;
        - wait_until:
            condition:
              lambda: |-
                return id(scd41_co2).has_state() && id(scd41_temperature).has_state() && id(scd41_humidity).has_state() &&
                       !isnan(id(scd41_co2).state) && !isnan(id(scd41_temperature).state) && !isnan(id(scd41_humidity).state);
            timeout: 60s
        - if:
            condition:
              lambda: |-
                return !id(scd41_co2).has_state() || !id(scd41_temperature).has_state() || !id(scd41_humidity).has_state() ||
                       isnan(id(scd41_co2).state) || isnan(id(scd41_temperature).state) || isnan(id(scd41_humidity).state);
            then:
              - lambda: |-
                  id(startup_failed) = true;
        - lambda: 'id(scd4x_checked) = true;'

api:
  actions:
    - action: calibrate_scd4x
      variables:
        co2_ppm: int
      then:
        - scd4x.perform_forced_calibration:
            id: scd41_sensor
            value: !lambda 'return co2_ppm;'

button:
  - platform: template
    name: "CO2 manual calibration (fresh air ≥3min)"
    id: scd4x_calibrate_426
    entity_category: config
    icon: mdi:tune
    on_press:
      then:
        - api.action:
            action: calibrate_scd4x
            data:
              co2_ppm: 426