# yamllint disable
# WiFi mixin for variants
wifi:
  # No WiFi credentials - device starts in AP mode for initial setup
  # Users can configure WiFi via:
  # - Captive Portal (connect to hotspot)
  # - Improv Serial (via WebTools)
  # - Improv BLE
  # - ESPHome dashboard (after adoption)
  
  ap:
    ssid: ${device_name}
    password: ${device_name}

captive_portal:

# Improv BLE + Serial (for provisioning)
esp32_improv:
  authorizer: none
improv_serial:

# Diagnostics (for onboarding URL params)
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: wifi_ip
      entity_category: diagnostic
      disabled_by_default: true
    mac_address:
      name: ESP MAC
      id: wifi_mac
      entity_category: diagnostic
      disabled_by_default: true

# BLE auto-disable switch optional (user can add)

esphome:
  on_boot:
    - priority: 600
      then:
        - lambda: |-
            id(startup_phase) = 1;
        - light.turn_on:
            id: status_led
            brightness: 80%
            effect: "Circulair Laad Effect"
        - wait_until:
            condition:
              wifi.connected:
            timeout: 30s
        - if:
            condition:
              wifi.connected:
            then:
              - script.execute: play_stream
              - if:
                  condition:
                    switch.is_on: ble_disable_after_boot
                  then:
                    - ble.disable:
              - if:
                  condition:
                    lambda: 'return !id(onboarding_sent);'
                  then:
                    - http_request.get:
                        url: !lambda |-
                          std::string name = esphome::App.get_name();
                          std::string mac = id(wifi_mac).has_state() ? std::string(id(wifi_mac).state.c_str()) : esphome::get_mac_address_pretty();
                          std::string ip = id(wifi_ip).has_state() ? std::string(id(wifi_ip).state.c_str()) : std::string("");
                          char buf[512];
                          snprintf(buf, sizeof(buf), "https://smarthomeshop.io/finish-onboarding/ceilsense?name=%s&mac=%s&ip=%s&ver=%s", name.c_str(), mac.c_str(), ip.c_str(), ESPHOME_VERSION);
                          return std::string(buf);
                    - lambda: 'id(onboarding_sent) = true;'
        # Self-test phases 3..5 + final LED indication happen in base
