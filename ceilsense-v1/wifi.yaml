# WiFi mixin for variants
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: ${wifi_fast_connect}
  # optional: speed up connect when SSID is hidden/fixed
  # you may also tune output power, b/g/n modes, etc. here
  ap:
    ssid: "CeilSense"
    password: "ceilsense"

captive_portal:

# Improv BLE + Serial (for provisioning)
esp32_improv:
  authorizer: none
improv_serial:

# Diagnostics (for onboarding URL params)
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: wifi_ip
      entity_category: diagnostic
      disabled_by_default: true
    mac_address:
      name: ESP MAC
      id: wifi_mac
      entity_category: diagnostic
      disabled_by_default: true

# BLE auto-disable switch optional (user can add)

esphome:
  on_boot:
    - priority: 600
      then:
        - lambda: |-
            id(startup_phase) = 1;
        - light.turn_on:
            id: status_led
            brightness: 80%
            effect: "Circulair Laad Effect"
        - wait_until:
            condition:
              wifi.connected:
            timeout: 30s
        - if:
            condition:
              not:
                wifi.connected:
            then:
              - lambda: |-
                  id(startup_failed) = true;
        - if:
            condition:
              wifi.connected:
            then:
              - script.execute: play_stream
              - if:
                  condition:
                    switch.is_on: ble_disable_after_boot
                  then:
                    - ble.disable:
              - if:
                  condition:
                    lambda: 'return !id(onboarding_sent);'
                  then:
                    - http_request.get:
                        url: !lambda |-
                          std::string name = esphome::App.get_name();
                          std::string mac = id(wifi_mac).has_state() ? std::string(id(wifi_mac).state.c_str()) : esphome::get_mac_address_pretty();
                          std::string ip = id(wifi_ip).has_state() ? std::string(id(wifi_ip).state.c_str()) : std::string("");
                          char buf[512];
                          snprintf(buf, sizeof(buf), "https://smarthomeshop.io/finish-onboarding/ceilsense?name=%s&mac=%s&ip=%s&ver=%s", name.c_str(), mac.c_str(), ip.c_str(), ESPHOME_VERSION);
                          return std::string(buf);
                    - lambda: 'id(onboarding_sent) = true;'
        # Self-test phases 3..5 happen in base via sensors (SCD4x/BH1750/BMP3xx)
        - light.turn_off: status_led
